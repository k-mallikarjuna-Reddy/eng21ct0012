import System.Random

data Player = Red | Green | Blue | Yellow deriving (Show, Eq)
data Piece = Piece Player Int deriving (Show, Eq)
type Board = [(Player, [Piece])]

initialBoard :: Board
initialBoard = [(Red, replicate 4 (Piece Red 0)),
                (Green, replicate 4 (Piece Green 0)),
                (Blue, replicate 4 (Piece Blue 0)),
                (Yellow, replicate 4 (Piece Yellow 0))]

rollDie :: IO Int
rollDie = randomRIO (1, 6)

movePiece :: Int -> Piece -> Piece
movePiece steps (Piece player position) = Piece player (position + steps)

updateBoard :: Player -> Int -> Board -> Board
updateBoard player steps board =
    let (before, (currentPlayer, pieces):after) = break (\(p, _) -> p == player) board
        updatedPlayer = (player, map (movePiece steps) pieces)
    in before ++ (updatedPlayer : after)

playGame :: Board -> IO ()
playGame board = do
    putStrLn "Current board state:"
    print board
    putStrLn "Press Enter to roll the die..."
    _ <- getLine
    steps <- rollDie
    putStrLn $ "You rolled a " ++ show steps ++ "!"
    let currentPlayer = head board
    let updatedBoard = updateBoard (fst currentPlayer) steps board
    playGame updatedBoard

main :: IO ()
main = playGame initialBoard
